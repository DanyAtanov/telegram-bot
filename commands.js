const commands = (bot) => {
	bot.api.setMyCommands([
		{ command: 'reg', description: '–£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ' },
		{ command: 'pidor', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é' },
		{ command: 'pidorstats', description: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã' },
		{ command: 'delete', description: '–°–±–µ–∂–∞—Ç—å —Å –ø–æ–ª—è –±–æ—è' },
	]);

	bot.command('start', async (ctx) => {
		await ctx.reply(
			'–£–∑–Ω–∞–µ–º –∫—Ç–æ –ø–∏–¥–æ—Ä –¥–Ω—è. –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª–æ—Ç–µ—Ä–µ–µ! üòé'
		);
	});

	bot.command('help', async (ctx) => {
		await ctx.reply('/reg - –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É \n /players - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
	});

	bot.command('reg', async (ctx) => {
		const chatMember = await ctx.chatMembers.getChatMember();
		let isNewPlayer = true;

		if (!ctx.session.userList.length) {
			isNewPlayer = true;
		} else {
			for (let i = 0; i < ctx.session.userList.length - 1; i++) {
				if (+chatMember.user.id === +ctx.session.userList[i].id) {
					isNewPlayer = false;
				}
			}
		}

		if (isNewPlayer) {
			ctx.session.userList.push({
				id: chatMember.user.id,
				name: chatMember.user.first_name,
				nickName: chatMember.user.username,
				wins: 0,
			});
			await ctx.reply(
				`–ò–≥—Ä–æ–∫ ${chatMember.user.first_name} (@${chatMember.user.username}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ!`
			);
		} else {
			await ctx.reply('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
		}
	});

	bot.hears('–ø–∏–¥–æ—Ä', async (ctx) => {
		await ctx.reply('–ê –∑–Ω–∞–µ—à—å –∫—Ç–æ –µ—â–µ –ø–∏–¥–æ—Ä –¥–Ω—è?');
	});

	bot.command('pidor', async (ctx) => {
		let todayPidor = choosePidor(ctx, ctx.session.userList);
		todayPidor.wins += 1;

		await ctx.reply('–í–ù–ò–ú–ê–ù–ò–ï üî•').then(() => {
			setTimeout(() => {
				ctx.reply('–§–ï–î–ï–†–ê–õ–¨–ù–´–ô –†–û–ó–´–°–ö –ü–ò–î–û–†–ê üö®');
			}, 1500);

			setTimeout(() => {
				ctx.reply('4 - —Å–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω üõ∞Ô∏è');
			}, 3000);

			setTimeout(() => {
				ctx.reply('3 - —Å–≤–æ–¥–∫–∏ –§–°–ë –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã üöî');
			}, 4500);

			setTimeout(() => {
				ctx.reply('2 - —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –æ–ø—Ä–æ—à–µ–Ω—ã üôÖ‚Äç‚ôÇÔ∏è');
			}, 6000);

			setTimeout(() => {
				ctx.reply('1 - –ü–∏–¥–æ—Ä –Ω–∞–π–¥–µ–Ω! üê§');
			}, 7500);

			setTimeout(() => {
				ctx.reply(
					`üåà –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† –¥–Ω—è - ${todayPidor.name} (@${todayPidor.nickName})(${todayPidor.wins}) ü•≥`
				);
			}, 9000);
		});
	});

	bot.command('pidorstats', async (ctx) => {
		await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üåà–ü–ò–î–û–† –î–Ω—è: \n  `);
	});

	function randomNumber(min, max) {
		return Math.floor(Math.random() * (max - min) + min);
	}

	function choosePidor(ctx, arr) {
		let indexPidor = randomNumber(0, arr.length - 1);
		let pidor = ctx.session.userList[indexPidor];

		return pidor;
	}
};

module.exports.commands = commands;
