/**
 * –°–µ—Å—Å–∏—è
 * @param {object} ctx.session - –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
 *
 * @param {array} ctx.session.userList - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
 * @param {array} ctx.session.winList - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
 * @param {array} ctx.session.currentMonthWinList - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞ –¢–ï–ö–£–©–ò–ô –º–µ—Å—è—Ü
 * @param {array} ctx.session.lastMonthWinList - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞ –ü–†–û–®–õ–´–ô –º–µ—Å—è—Ü
 * @param {number} ctx.session.lastTime - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å 1 —è–Ω–≤–∞—Ä—è 1970 –≥–æ–¥–∞ 00:00:00 –¥–æ –ø—Ä–æ—à–ª–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ü–∏–¥–æ—Ä–∞ –î–Ω—è
 * @param {number} ctx.session.lastTimeRage - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å 1 —è–Ω–≤–∞—Ä—è 1970 –≥–æ–¥–∞ 00:00:00 –¥–æ –ø—Ä–æ—à–ª–æ–π –¢—Ä–µ—Ö–±–ª—è–¥—Å–∫–æ–π —è—Ä–æ—Å—Ç–∏
 * @param {number} ctx.session.currentMonth - –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (0 - —è–Ω–≤–∞—Ä—å)
 * @param {object} ctx.session.todayPidor - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
 * @param {object} ctx.session.ragePidor - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
 *
 * –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ userList
 * @param {object} ctx.session.userList[i] - –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *
 * @param {number} ctx.session.userList[i].id - –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} ctx.session.userList[i].user - –∏–º—è
 * @param {string} ctx.session.userList[i].userName - –Ω–∏–∫–Ω–µ–π–º
 * @param {number} ctx.session.userList[i].wins - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
 * @param {number} ctx.session.userList[i].monthWins - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –∑–∞ –º–µ—Å—è—Ü
 */

require('dotenv').config();

const commands = (bot) => {
	// –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–µ–Ω—é –±–æ—Ç–∞
	bot.api.setMyCommands([
		{ command: 'reg', description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–µ—á–µ—Ä–∏–Ω–∫–µ' },
		{ command: 'pidor', description: '–ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω' },
		/* { command: 'monthstats', description: '–¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü' }, */
		{ command: 'pidorstats', description: '–î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞' },
		{ command: 'delete', description: '–°–±–µ–∂–∞—Ç—å —Å –ø–æ–ª—è –±–æ—è' },
	]);

	bot.command('start', async (ctx) => {
		await ctx.reply(
			'–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ò–î–û–†–ê –î–ù–Ø! –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –ª—é–±—É—é –∫–æ–Ω—Ñ—É –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª–æ—Ç–µ—Ä–µ–µ! üòé \n \n /reg - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–µ—á–µ—Ä–∏–Ω–∫–µ \n /pidor - –∫—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω \n /pidorstats - –¥–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ \n /delete - —Å–±–µ–∂–∞—Ç—å —Å –ø–æ–ª—è –±–æ—è'
		);
	});

	bot.command('help', async (ctx) => {
		await ctx.reply('/reg - –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É \n /players - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
	});

	bot.command('reg', async (ctx) => {
		const chatMember = await ctx.chatMembers.getChatMember();

		if (!ctx.session.userList.length) {
			ctx.session.userList.push({
				id: chatMember.user.id,
				name: chatMember.user.first_name,
				nickName: chatMember.user.username,
				wins: 0,
				monthWins: 0,
			});
			await ctx.reply(
				`–ò–≥—Ä–æ–∫ ${chatMember.user.first_name} (@${chatMember.user.username}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ!`
			);
		} else {
			let isOldPlayer;

			for (let i = 0; i <= ctx.session.userList.length - 1; i++) {
				if (+chatMember.user.id === +ctx.session.userList[i].id) {
					isOldPlayer = true;
				}
			}

			if (isOldPlayer) {
				await ctx.reply('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
			} else {
				ctx.session.userList.push({
					id: chatMember.user.id,
					name: chatMember.user.first_name,
					nickName: chatMember.user.username,
					wins: 0,
					monthWins: 0,
				});
				await ctx.reply(
					`–ò–≥—Ä–æ–∫ ${chatMember.user.first_name} (@${chatMember.user.username}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ!`
				);
			}
		}
	});

	bot.hears('–ø–∏–¥–æ—Ä', async (ctx) => {
		await ctx.reply(
			`–ê –∑–Ω–∞–µ—à—å –∫—Ç–æ –µ—â–µ –ø–∏–¥–æ—Ä? –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${ctx.session.todayPidor.name}(@${ctx.session.todayPidor.nickName}) üòé!`
		);
	});

	bot.command('pidor', async (ctx) => {
		const now = Date.now();

		if (!ctx.session.userList.length) {
			await ctx.reply(
				`–ü–∏–¥–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî \n \n /reg - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–µ—á–µ—Ä–∏–Ω–∫–µ`
			);

			return;
		}

		if (ctx.session.currentMonth) {
			if (ctx.session.currentMonth !== getMonth().monthIndex) {
				ctx.session.currentMonth = new Date(now).getUTCMonth();
				ctx.session.lastMonthWinList = structuredClone(currentMonthWinList);
				ctx.session.currentMonthWinList.length = 0;
			}
		} else {
			ctx.session.currentMonth = new Date(now).getUTCMonth();
			ctx.session.currentMonthWinList = [];
			ctx.session.lastMonthWinList = [];
		}

		if (!isOK(ctx, now)) {
			await ctx.reply(
				`–°–µ–≥–æ–¥–Ω—è üåà–ü–ò–î–û–† –¥–Ω—è - ${ctx.session.todayPidor.name}(@${ctx.session.todayPidor.nickName})`
			);
			return;
		}

		ctx.session.lastTime = now;

		let todayPidor = await choosePidor(ctx, ctx.session.userList);

		ctx.session.todayPidor = todayPidor;

		if (ctx.session.winList.length) {
			let newWinner;
			for (let i = 0; i <= ctx.session.winList.length - 1; i++) {
				if (+todayPidor.id === +ctx.session.winList[i].id) {
					ctx.session.winList[i].wins += 1;
					newWinner = false;
					break;
				} else {
					newWinner = true;
				}
			}

			if (newWinner) {
				todayPidor.wins += 1;
				ctx.session.winList.push(todayPidor);
			}
		} else {
			todayPidor.wins += 1;
			ctx.session.winList.push(todayPidor);
		}

		//–∑–∞ –º–µ—Å—è—Ü
		if (ctx.session.currentMonthWinList.length) {
			let newWinner;
			for (let i = 0; i <= ctx.session.currentMonthWinList.length - 1; i++) {
				if (+todayPidor.id === +ctx.session.currentMonthWinList[i].id) {
					if (!ctx.session.currentMonthWinList[i].monthWins) {
						todayPidor.monthWins = 0;
					}
					ctx.session.currentMonthWinList[i].monthWins += 1;
					newWinner = false;
					break;
				} else {
					newWinner = true;
				}
			}

			if (newWinner) {
				if (!todayPidor.monthWins) {
					todayPidor.monthWins = 0;
				}
				todayPidor.monthWins += 1;
				ctx.session.currentMonthWinList.push(todayPidor);
			}
		} else {
			if (!todayPidor.monthWins) {
				todayPidor.monthWins = 0;
			}
			todayPidor.monthWins += 1;
			ctx.session.currentMonthWinList.push(todayPidor);
		}

		await ctx.reply('–í–ù–ò–ú–ê–ù–ò–ï üî•').then(() => {
			if (ctx.chat?.id.toString() === process.env.TEST_SESSION_KEY) {
				ctx.reply(
					`üåà –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† –¥–Ω—è - ${todayPidor.name} (@${todayPidor.nickName}) ü•≥`
				);
			} else {
				setTimeout(() => {
					ctx.reply('–§–ï–î–ï–†–ê–õ–¨–ù–´–ô –†–û–ó–´–°–ö –ü–ò–î–û–†–ê üö®');
				}, 1500);

				setTimeout(() => {
					ctx.reply('4 - —Å–ø—É—Ç–Ω–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã üõ∞Ô∏è');
				}, 3000);

				setTimeout(() => {
					ctx.reply('3 - —Å–≤–æ–¥–∫–∏ –§–°–ë –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã üöî');
				}, 4500);

				setTimeout(() => {
					ctx.reply('2 - —Å–æ—Ü—Å–µ—Ç–∏ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã üôÖ‚Äç‚ôÇÔ∏è');
				}, 6000);

				setTimeout(() => {
					ctx.reply('1 - –ü–∏–¥–æ—Ä –Ω–∞–π–¥–µ–Ω! üêî');
				}, 7500);

				setTimeout(() => {
					ctx.reply(
						`üåà –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† –¥–Ω—è - ${todayPidor.name} (@${todayPidor.nickName}) ü•≥`
					);
				}, 9000);
			}
		});
	});

	//! üî• –¢—Ä–µ—Ö–±–ª—è–¥—Å–∫–∞—è —è—Ä–æ—Å—Ç—å üî•
	bot.command('pidorRage', async (ctx) => {
		const now = Date.now();

		if (!ctx.session.userList.length) {
			await ctx.reply(
				`–ü–∏–¥–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî \n \n /reg - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–µ—á–µ—Ä–∏–Ω–∫–µ`
			);

			return;
		}

		if (ctx.session.currentMonth) {
			if (ctx.session.currentMonth !== getMonth().monthIndex) {
				ctx.session.currentMonth = new Date(now).getUTCMonth();
				ctx.session.lastMonthWinList = structuredClone(currentMonthWinList);
				ctx.session.currentMonthWinList.length = 0;
			}
		} else {
			ctx.session.currentMonth = new Date(now).getUTCMonth();
			ctx.session.currentMonthWinList = [];
			ctx.session.lastMonthWinList = [];
		}

		if (!rageIsOK(ctx, now)) {
			await ctx.reply(
				`–¢—Ä–µ—Ö–±–ª—è–¥—Å–∫–∞—è —è—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é. –ü–æ—Å–ª–µ–¥–Ω—è—è –∂–µ—Ä—Ç–≤–∞: ${ctx.session.ragePidor.name}(@${ctx.session.ragePidor.nickName})`
			);
			return;
		}

		ctx.session.lastTimeRage = now;

		let ragePidor = await choosePidor(ctx, ctx.session.userList);

		ctx.session.ragePidor = ragePidor;

		if (ctx.session.winList.length) {
			let newWinner;
			for (let i = 0; i <= ctx.session.winList.length - 1; i++) {
				if (+ragePidor.id === +ctx.session.winList[i].id) {
					ctx.session.winList[i].wins += 3;
					newWinner = false;
					break;
				} else {
					newWinner = true;
				}
			}

			if (newWinner) {
				ragePidor.wins += 3;
				ctx.session.winList.push(ragePidor);
			}
		} else {
			ragePidor.wins += 3;
			ctx.session.winList.push(ragePidor);
		}

		//–∑–∞ –º–µ—Å—è—Ü
		if (ctx.session.currentMonthWinList.length) {
			let newWinner;
			for (let i = 0; i <= ctx.session.currentMonthWinList.length - 1; i++) {
				if (+ragePidor.id === +ctx.session.currentMonthWinList[i].id) {
					if (!ctx.session.currentMonthWinList[i].monthWins) {
						ragePidor.monthWins = 0;
					}
					ctx.session.currentMonthWinList[i].monthWins += 3;
					newWinner = false;
					break;
				} else {
					newWinner = true;
				}
			}

			if (newWinner) {
				if (!ragePidor.monthWins) {
					ragePidor.monthWins = 0;
				}
				ragePidor.monthWins += 3;
				ctx.session.currentMonthWinList.push(ragePidor);
			}
		} else {
			if (!ragePidor.monthWins) {
				ragePidor.monthWins = 0;
			}
			ragePidor.monthWins += 3;
			ctx.session.currentMonthWinList.push(ragePidor);
		}

		await ctx.reply('–ë–ï–†–ï–ì–ò–¢–ï–°–¨! üÜò').then(() => {
			if (ctx.chat?.id.toString() === process.env.TEST_SESSION_KEY) {
				ctx.reply(
					`üåà –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∂–µ—Ä—Ç–≤–∞ —Ç—Ä–µ–±–ª—è–¥—Å–∫–æ–π —è—Ä–æ—Å—Ç–∏ - ${ragePidor.name} (@${ragePidor.nickName}) ü•≥`
				);
			} else {
				setTimeout(() => {
					ctx.reply('–†–ê–ó–ì–û–†–ê–ï–¢–°–Ø –¢–†–ï–•–ë–õ–Ø–î–°–ö–ê–Ø –Ø–†–û–°–¢–¨ üî•');
				}, 1500);

				setTimeout(() => {
					ctx.reply('4 - —É–¥–∞–ª—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ ü§≥ ');
				}, 3000);

				setTimeout(() => {
					ctx.reply('3 - –ø—Ä—è—á—å—Ç–µ –∂–µ–Ω –∏ –¥–µ—Ç–µ–π üë¨');
				}, 4500);

				setTimeout(() => {
					ctx.reply('2 - –º–æ–ª–∏—Ç–µ—Å—å –ê–ª–ª–∞—Ö—É üë≥‚Äç‚ôÇÔ∏è');
				}, 6000);

				setTimeout(() => {
					ctx.reply('1 - –ü—è–∑–¥–∞ –ø—Ä–∏—à–ª–∞! üêî');
				}, 7500);

				setTimeout(() => {
					ctx.reply(
						`üåàüåàüåà –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∂–µ—Ä—Ç–≤–∞ –¢–†–ï–•–ë–õ–Ø–î–°–ö–û–ô –Ø–†–û–°–¢–ò - ${todayPidor.name} (@${todayPidor.nickName}) ü•≥`
					);
				}, 9000);
			}
		});
	});
	//! /–¢—Ä–µ—Ö–±–ª—è–¥—Å–∫–∞—è —è—Ä–æ—Å—Ç—å

	bot.command('pidorstats', async (ctx) => {
		let winArr = ctx.session.winList;

		const sortedArr = winArr.sort((a, b) => {
			return b.wins - a.wins;
		});

		await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üåà–ü–ò–î–û–† –î–Ω—è: \n ${generateStats(sortedArr)}`);
	});

	bot.command('monthstats', async (ctx) => {
		let winArr = ctx.session.currentMonthWinList;

		const sortedArr = winArr.sort((a, b) => {
			return b.monthWins - a.monthWins;
		});

		await ctx.reply(
			`–¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤ –∑–∞ ${getMonth().monthString}: \n ${generateMonthStats(
				sortedArr
			)}`
		);
	});

	bot.command('lastmonthstats', async (ctx) => {
		let winArr = ctx.session.lastMonthWinList;

		if (winArr.length) {
			const sortedArr = winArr.sort((a, b) => {
				return b.monthWins - a.monthWins;
			});

			await ctx.reply(
				`–¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤ –∑–∞ ${getMonth().lastMonth}: \n ${generateMonthStats(
					sortedArr
				)}`
			);
		} else {
			await ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞`);
		}
	});

	bot.command('delete', async (ctx) => {
		const chatMember = await ctx.chatMembers.getChatMember();
		let isOldPlayer;

		for (let i = 0; i <= ctx.session.userList.length - 1; i++) {
			if (+chatMember.user.id === +ctx.session.userList[i].id) {
				isOldPlayer = true;
			}
		}

		if (isOldPlayer) {
			await ctx.reply(
				`–°–æ–±—Ä–∞–ª—Å—è —Å–±–µ–∂–∞—Ç—å —Å –ø–æ–ª—è –±–æ—è? –ù–æ –Ω–µ —Ç—É—Ç —Ç–æ –±—ã–ª–æ. –¢–µ—Ä–ø–∏! –¢—ã –≤ –∏–≥—Ä–µ!`
			);
		} else {
			await ctx.reply(
				`–í –∏–≥—Ä—É –Ω–µ –≤—Å—Ç—É–ø–∏–ª, –∞ —É–∂–µ —Å–æ–±—Ä–∞–ª—Å—è –±–µ–∂–∞—Ç—å? ${chatMember.user.first_name} (@${chatMember.user.username}) - –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∏–¥–æ—Ä! ü§°`
			);
		}
	});

	// –æ—Ç min (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –¥–æ max (–Ω–µ–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
	function randomNumber(min, max) {
		return Math.floor(Math.random() * (max - min) + min);
	}

	function choosePidor(ctx, arr) {
		// –±–µ—Ä–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. max - –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
		let indexPidor = randomNumber(0, arr.length);
		let pidor = ctx.session.userList[indexPidor];

		return pidor;
	}

	function generateStats(arr) {
		let message = '';
		const gold = ' ü•á';
		const silver = ' ü•à';
		const bronze = ' ü•â';

		for (let i = 0; i <= arr.length - 1; i++) {
			message += `\n (${i + 1}) ${arr[i].name} (@${arr[i].nickName}) - ${
				arr[i].wins
			} —Ä–∞–∑(–∞)`;

			if (i === 0) {
				message += gold;
			} else if (i === 1) {
				message += silver;
			} else if (i === 2) {
				message += bronze;
			}
		}

		return message;
	}

	function generateMonthStats(arr) {
		let message = '';
		const gold = ' ü•á';
		const silver = ' ü•à';
		const bronze = ' ü•â';

		for (let i = 0; i <= arr.length - 1; i++) {
			message += `\n (${i + 1}) ${arr[i].name} (@${arr[i].nickName}) - ${
				arr[i].monthWins
			} —Ä–∞–∑(–∞)`;

			if (i === 0) {
				message += gold;
			} else if (i === 1) {
				message += silver;
			} else if (i === 2) {
				message += bronze;
			}
		}

		return message;
	}

	function isOK(ctx, time) {
		if (ctx.chat?.id.toString() === process.env.TEST_SESSION_KEY) return true;

		const lastTime = ctx.session.lastTime;
		const nowTime = Date.now();

		if (nowTime - lastTime > 6.48e7) {
			return true;
		} else {
			return false;
		}
	}

	function rageIsOK(ctx, time) {
		if (ctx.chat?.id.toString() === process.env.TEST_SESSION_KEY) return true;

		const lastTimeRage = ctx.session.lastTimeRage ? ctx.session.lastTimeRage : 0;
		const nowTime = Date.now();

		if ((nowTime - lastTimeRage > 5, 832e8)) {
			return true;
		} else {
			return false;
		}
	}

	function getMonth() {
		const monthList = [
			'–Ø–Ω–≤–∞—Ä—å',
			'–§–µ–≤—Ä–∞–ª—å',
			'–ú–∞—Ä—Ç',
			'–ê–ø—Ä–µ–ª—å',
			'–ú–∞–π',
			'–ò—é–Ω—å',
			'–ò—é–ª—å',
			'–ê–≤–≥—É—Å—Ç',
			'–°–µ–Ω—Ç—è–±—Ä—å',
			'–û–∫—Ç—è–±—Ä—å',
			'–ù–æ—è–±—Ä—å',
			'–î–µ–∫–∞–±—Ä—å',
		];
		let month = {
			monthString: monthList[new Date(Date.now()).getUTCMonth()],
			monthIndex: new Date(Date.now()).getUTCMonth(),
			lastMonth: monthList[new Date(Date.now()).getUTCMonth() - 1],
		};

		return month;
	}
};

module.exports.commands = commands;
